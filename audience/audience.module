<?php

/**
 * @file
 *   This module provides an API to define a audience via audience types.
 *
 *   This information will be used e.g by faf to define access groups.
 */

/**
 * Implementation of hook_perm().
 */
function audience_perm() {
  return array('administer audience');
}

/**
 * Wrapper function for loading types via ctools plugin.
 */
function audience_get_types() {
  ctools_include('plugins');
  return ctools_get_plugins('audience', 'audience_types');
}

/**
 * Wrapper function for loading a single audience type, using ctools plugin.
 */
function audience_get_type($audience_type) {
  ctools_include('plugins');
  return ctools_get_plugins('audience', 'audience_types', $audience_type);
}

/**
 * Wrapper function to get a list of presets.
 *
 * @param $reset
 *   defaults to FALSE, set to TRUE to force clearing cache for export definitions.
 * @return
 *   an array of preset objects.
 */
function audience_get_presets($reset = FALSE) {
  ctools_include('export');

  if ($reset) {
    ctools_export_load_object_reset('audience_preset');
  }

  // ctools_export_crud_load_all() needs not to be called as we know that
  // audience presets are loaded by the ctools default function, and so need
  // not call the schema definition for that.
  return ctools_export_load_object('audience_preset', 'all');
}

/**
 * Wrapper function get a sinlge preset definition.
 *
 * @param $preset_name
 *   string identifier of the audience preset.
 *
 * @return
 *   a audience preset object
 *   NULL if load failed
 */
function audience_get_preset($preset_name) {
  ctools_include('export');
  // ctools_export_crud_load() needs not to be called as we know that
  // audience presets are loaded by the ctools default function.

  $result = ctools_export_load_object('audience_preset', 'names', array($preset_name));
  if (isset($result[$preset_name])) {
    return $result[$preset_name];
  }
}

/**
 * Wrapper function to retrieve the audience presets prepared for options array.
 *
 * @param $shorten
 *   either a boolean value, that indicates the if the labels shall be shortened
 *   to a limited character count (defaults to 64), or a integer value that
 *   defines the concretete character count
 * @return
 *   array of key-value pairs: key is the preset name, value the (maybe shortened)
 *   preset label/description
 */
function audience_presets_as_optionsarray($shorten = FALSE) {
  $static = ($shorten) ? __FUNCTION__ .'_shortened' : __FUNCTION__;
  $return = &ctools_static($static);
  $shorten = ($shorten === TRUE) ? 64 : (int) $shorten;

  if (!$return) {
    $audience_presets = audience_get_presets();
    $return = array();
    foreach ($audience_presets as $preset) {
      if ($shorten && drupal_strlen($preset->description) > $shorten) {
        $text = (drupal_strlen($text) > $shorten) ? drupal_substr($text, 0, $shorten - 3) .'...' : $text;
      }
      else {
        $text = $preset->description;
      }
      $return[$preset->name] = $text;
    }
    ksort($return);
  }
  return $return;
}

/**
 * Check if the given user is member of the given audience preset
 *
 * @param $preset_name
 *   string identifier of the audience preset to check on
 * @param $account
 *   user object of the user to check on
 *   defaults to NULL so the current user will be used.
 * @param $context
 *   additional entities "member of" function can validate the user with, for
 *   example array('node' => $node) to check on a given node, like in node
 *   author/editor or userreference field.
 *
 * @return
 *   TRUE if the user is member of the given audience preset in the given context
 *   FALSE if not
 */
function audience_is_member_of($preset_name, $account = NULL, $context = array()) {
  if (!isset($account)) {
    GLOBAL $user;
    $account = $user;
  }

  // Load preset
  ctools_include('export');
  $preset = ctools_export_crud_load('audience_preset', $preset_name);
  // Get callback for the presets audience type.
  $is_member_of_callback = ctools_plugin_load_function('audience', 'audience_types', $preset->audience_type, 'is member callback');
  // Check on callback, if it exists.
  if ($is_member_of_callback) {
    return $is_member_of_callback($preset, $account, $context);
  }
  // Else return FALSE, as no callback could be found.
  return FALSE;
}


/**
 * Helper function to retrieve options as keyed array from plugin definitions.
 */
function audience_types_options_array($option) {
  $plugins = audience_get_types();
  $return = array();
  foreach ($plugins as $name => $plugin) {
    if (isset($plugin[$option])) {
      $return[$name] = $plugin[$option];
    }
  }
  return $return;
}

/**
 * Implementation of pseudohook_ctools_plugin_PLUGINTYPE().
 *
 * Inform CTools about default values for the plugin implementation.
 */
function audience_ctools_plugin_audience_types() {
  return array(
    'defaults' => array(
      // A callback function
      'is member callback' => NULL,
      // Selector options (either array or callback)
      'selector options' => NULL,
      'selector title' => 'Selector',
      'selector description' => 'Configure the given audience type by selecting an option.',
      // @TODO: maybe additional config form
      // 'config form' => '',
    ),
    //'process' => '_audience_ctools_plugin_process',
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * So we can define some data for different plugins, as audience_types.
 */
function audience_ctools_plugin_directory($module, $plugin) {
  // Audience Types
  if ($module == 'audience' && $plugin == 'audience_types') {
    return 'plugins/audience_types';
  }
  // Load the export_ui plugin for implementing audience settings page.
  elseif ($plugin =='export_ui') {
    return 'plugins/export_ui';
  }
}

//----- Audience (Exportables) ----//

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_audience API.
 */
function audience_ctools_plugin_api($owner, $api) {
  if ($owner == 'audience' && $api == 'default_audience_preset') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_default_audience_preset().
 *
 * Provide a couple of default audience presets.
 */
function audience_default_audience_preset() {
  $export = array();

  // Super User ($user->uid == 1)
  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'user_1';
  $preset->description = 'Super user';
  $preset->audience_type = 'user';
  $preset->selector = '1';
  $preset->config = NULL;
  $export['user_1'] = $preset;

  // Anonymous user
  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'anonymous_user';
  $preset->description = 'anonymous user';
  $preset->audience_type = 'roles';
  $preset->selector = '1';
  $preset->config = NULL;
  $export['anonymous_user'] = $preset;

  // Authenticated user
  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'authenticated_user';
  $preset->description = 'authenticated user';
  $preset->audience_type = 'roles';
  $preset->selector = '2';
  $preset->config = NULL;
  $export['authenticated_user'] = $preset;

  return $export;
}
