<?php

/**
 * @file
 *   This module provides an API to define a audience via audience types.
 *   This information will be used by faf to define access groups.
 */


/**
 * Implementation of hook_perm().
 */
function faf_audience_perm() {
  return array('administer faf_audience');
}

/**
 * Wrapper function for loading types via ctools plugin.
 */
function faf_audience_get_types() {
  ctools_include('plugins');
  return ctools_get_plugins('faf_audience', 'audience_types');
}

/**
 * Wrapper function for loading a single audience type, using ctools plugin.
 */
function faf_audience_get_type($audience_type) {
  ctools_include('plugins');
  return ctools_get_plugins('faf_audience', 'audience_types', $audience_type);
}

/**
 * Helper function to retrieve options as keyed array from plugin definitions.
 */
function faf_audience_types_options_array($option) {
  $plugins = faf_audience_get_types();
  $return = array();
  foreach ($plugins as $name => $plugin) {
    if (isset($plugin[$option])) {
      $return[$name] = $plugin[$option];
    }
  }
  return $return;
}

/**
 * Implementation of pseudohook_ctools_plugin_PLUGINTYPE().
 *
 * Inform CTools about default values for the plugin implementation.
 */
function faf_audience_ctools_plugin_audience_types() {
  return array(
    'defaults' => array(
      // A callback function
      'member callback' => NULL,
      // Define configuration options
      //'config' => array(
      //  '#type' => 'select',
      //  '#multiple' => FALSE,
      //  '#required' => FALSE,
      //  '#options' => array(),
      //),
    ),
    //'process' => '_faf_audience_ctools_plugin_process',
  );
}

/**
 * Implement hook_ctools_plugin_directory().
 *
 * So we can define some data for different plugins, as faf_audience_types.
 */
function faf_audience_ctools_plugin_directory($module, $plugin) {

  // FAF Audience Types
  if ($module == 'faf_audience' && $plugin == 'audience_types') {
    return 'plugins/audience_types';
  }
  // Load the export_ui plugin for implementing faf_audience settings page.
  elseif ($plugin =='export_ui') {
    return 'plugins/export_ui';
  }
}

//----- Audience (Exportables) ----//

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_faf_audience API.
 */
function faf_audience_ctools_plugin_api($owner, $api) {
  if ($owner == 'faf_audience' && $api == 'default_faf_audience_preset') {
    return array('version' => 1);
  }
}

/**
* Implementation of hook_default_faf_audience().
*
* Provide a couple of default presets for
*/
function faf_audience_default_faf_audience_preset() {
  $export = array();

  // Super User ($user->uid == 1)
  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'user_1';
  $preset->description = 'Super user';
  $preset->audience_type = 'user';
  $preset->option = '1';
  $preset->config = NULL;
  $export['user_1'] = $preset;

  return $export;
}


/**
 * Helper function to validate preset definition.
 *
 * @param $preset
 *   a audience preset object.
 * @param $set_error
 *   boolean value, if set to true, it will fire errors on failed validations.
 *
 * @return
 *   TRUE if validation was successful, else FALSE
 */
function _faf_audience_validate_preset($preset, $set_error = FALSE) {
  $valid = TRUE;

  // An existing preset needs an audience_type.
  if (isset($preset->name)) {
    if (!isset($preset->audience_type) || !$preset->audience_type) {
      $valid = FALSE;
      if ($set_error) {
        form_set_error('audience_type', t('There has to be a audience type selected!'));
      }
    }
  }

  // Does audience type exist
  if (isset($preset->audience_type)) {
    $res = faf_audience_get_type($preset->audience_type);
    if (empty($res)) {
      $valid = FALSE;
      if ($set_error) {
        form_set_error('audience_type', t('The given audience type "%audience" is not available. Please activate or update the module providing this audience type.', array('%audience_type' => $preset->audience_type)));
      }
    }
  }

  return $valid;
}